#!/bin/bash

# Pre-commit hook to run linting and formatting checks
set -e

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    print_status "No staged files to check"
    exit 0
fi

# Check Prettier formatting on staged files
print_status "Checking Prettier formatting on staged files..."
    
FORMAT_FAILED=false
for file in $STAGED_FILES; do
    # Check formatting of staged content
    if ! git show ":$file" | npx prettier --check --stdin-filepath "$file" > /dev/null 2>&1; then
        print_error "❌ Prettier formatting failed for staged content in: $file"
        FORMAT_FAILED=true
    fi
done
    
if [ "$FORMAT_FAILED" = true ]; then
    print_error "❌ Prettier formatting check failed"
    echo "💡 Run 'npx prettier --write <files>' and stage the changes"
    exit 1
else
    print_status "✅ Prettier formatting check passed"
fi

# Run ESLint on staged TypeScript/JavaScript files
print_status "Running ESLint on staged files..."
    
LINT_FAILED=false
for file in $STAGED_FILES; do
    # Run ESLint on staged content
    if ! git show ":$file" | npx eslint --stdin --stdin-filename "$file" --no-warn-ignored --max-warnings 0 > /dev/null 2>&1; then
        print_error "❌ ESLint failed for staged content in: $file"
        LINT_FAILED=true
    fi
done

if [ "$LINT_FAILED" = true ]; then
    print_error "❌ ESLint check failed"
    echo "💡 Fix ESLint issues and stage the changes"
    exit 1
else
    print_status "✅ ESLint check passed"
fi

print_status "🎉 All pre-commit checks passed!"

exit 0